import $ff9177efc58547ad$exports from "./ar-AE.module.js";
import $25eb7c0c0c45e544$exports from "./bg-BG.module.js";
import $28feffc3d61a8691$exports from "./cs-CZ.module.js";
import $390d441203d25ff4$exports from "./da-DK.module.js";
import $7063c2d0f14f979a$exports from "./de-DE.module.js";
import $2dfc1dbb6590af88$exports from "./el-GR.module.js";
import $9a12ff1caae5a7a5$exports from "./en-US.module.js";
import $f4095fb5a72adbe6$exports from "./es-ES.module.js";
import $75bc5191b9d7826a$exports from "./et-EE.module.js";
import $e4b9aef18b0db8dc$exports from "./fi-FI.module.js";
import $888756784d832bd7$exports from "./fr-FR.module.js";
import $6835949b68a1fabf$exports from "./he-IL.module.js";
import $87ffcbc0b651e40b$exports from "./hr-HR.module.js";
import $dc6e3b2813600d69$exports from "./hu-HU.module.js";
import $fe136bcbacfcfa14$exports from "./it-IT.module.js";
import $8fb53a929b46df83$exports from "./ja-JP.module.js";
import $2c38dbfaf041a865$exports from "./ko-KR.module.js";
import $48f3f33a29908d4c$exports from "./lt-LT.module.js";
import $9867160d996455a0$exports from "./lv-LV.module.js";
import $196258ea25c96487$exports from "./nb-NO.module.js";
import $949061cb954e8000$exports from "./nl-NL.module.js";
import $8189bed27add1ad3$exports from "./pl-PL.module.js";
import $a361756a93b6e28c$exports from "./pt-BR.module.js";
import $034c7393857c8db0$exports from "./pt-PT.module.js";
import $e33d3b3868478b04$exports from "./ro-RO.module.js";
import $9a7dcb914b29cd9f$exports from "./ru-RU.module.js";
import $e43d964a0c7f1266$exports from "./sk-SK.module.js";
import $0bc56cee3275bcaa$exports from "./sl-SI.module.js";
import $7dbdd7289c10d2ba$exports from "./sr-SP.module.js";
import $ccbe6066c10b1e53$exports from "./sv-SE.module.js";
import $9d503476b9d858b7$exports from "./tr-TR.module.js";
import $32ee419c7b9b7a83$exports from "./uk-UA.module.js";
import $122525af1cb737c7$exports from "./zh-CN.module.js";
import $52e8b1b00094e5a3$exports from "./zh-TW.module.js";
import {useEffect as $5bA4N$useEffect, useRef as $5bA4N$useRef} from "react";
import {useLayoutEffect as $5bA4N$useLayoutEffect, useId as $5bA4N$useId, useSlotId as $5bA4N$useSlotId, focusWithoutScrolling as $5bA4N$focusWithoutScrolling, mergeProps as $5bA4N$mergeProps} from "@react-aria/utils";
import {useLocalizedStringFormatter as $5bA4N$useLocalizedStringFormatter} from "@react-aria/i18n";
import {useHover as $5bA4N$useHover, useFocusWithin as $5bA4N$useFocusWithin, getInteractionModality as $5bA4N$getInteractionModality} from "@react-aria/interactions";
import {useLandmark as $5bA4N$useLandmark} from "@react-aria/landmark";


function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ var $7853651519a70071$exports = {};


































$7853651519a70071$exports = {
    "ar-AE": $ff9177efc58547ad$exports,
    "bg-BG": $25eb7c0c0c45e544$exports,
    "cs-CZ": $28feffc3d61a8691$exports,
    "da-DK": $390d441203d25ff4$exports,
    "de-DE": $7063c2d0f14f979a$exports,
    "el-GR": $2dfc1dbb6590af88$exports,
    "en-US": $9a12ff1caae5a7a5$exports,
    "es-ES": $f4095fb5a72adbe6$exports,
    "et-EE": $75bc5191b9d7826a$exports,
    "fi-FI": $e4b9aef18b0db8dc$exports,
    "fr-FR": $888756784d832bd7$exports,
    "he-IL": $6835949b68a1fabf$exports,
    "hr-HR": $87ffcbc0b651e40b$exports,
    "hu-HU": $dc6e3b2813600d69$exports,
    "it-IT": $fe136bcbacfcfa14$exports,
    "ja-JP": $8fb53a929b46df83$exports,
    "ko-KR": $2c38dbfaf041a865$exports,
    "lt-LT": $48f3f33a29908d4c$exports,
    "lv-LV": $9867160d996455a0$exports,
    "nb-NO": $196258ea25c96487$exports,
    "nl-NL": $949061cb954e8000$exports,
    "pl-PL": $8189bed27add1ad3$exports,
    "pt-BR": $a361756a93b6e28c$exports,
    "pt-PT": $034c7393857c8db0$exports,
    "ro-RO": $e33d3b3868478b04$exports,
    "ru-RU": $9a7dcb914b29cd9f$exports,
    "sk-SK": $e43d964a0c7f1266$exports,
    "sl-SI": $0bc56cee3275bcaa$exports,
    "sr-SP": $7dbdd7289c10d2ba$exports,
    "sv-SE": $ccbe6066c10b1e53$exports,
    "tr-TR": $9d503476b9d858b7$exports,
    "uk-UA": $32ee419c7b9b7a83$exports,
    "zh-CN": $122525af1cb737c7$exports,
    "zh-TW": $52e8b1b00094e5a3$exports
};





function $d6542812f0669241$export$a407b657d3044108(props, state, ref) {
    let { key: key, timer: timer, timeout: timeout, animation: animation } = props.toast;
    (0, $5bA4N$useEffect)(()=>{
        if (!timer) return;
        timer.reset(timeout);
        return ()=>{
            timer.pause();
        };
    }, [
        timer,
        timeout
    ]);
    // Restore focus to the toast container on unmount.
    // If there are no more toasts, the container will be unmounted
    // and will restore focus to wherever focus was before the user
    // focused the toast region.
    let focusOnUnmount = (0, $5bA4N$useRef)(null);
    (0, $5bA4N$useLayoutEffect)(()=>{
        let container = ref.current.closest("[role=region]");
        return ()=>{
            if (container && container.contains(document.activeElement)) // Focus must be delayed for focus ring to appear, but we can't wait
            // until useEffect cleanup to check if focus was inside the container.
            focusOnUnmount.current = container;
        };
    }, [
        ref
    ]);
    // eslint-disable-next-line
    (0, $5bA4N$useEffect)(()=>{
        return ()=>{
            if (focusOnUnmount.current) focusOnUnmount.current.focus();
        };
    }, [
        ref
    ]);
    let titleId = (0, $5bA4N$useId)();
    let descriptionId = (0, $5bA4N$useSlotId)();
    let stringFormatter = (0, $5bA4N$useLocalizedStringFormatter)((0, (/*@__PURE__*/$parcel$interopDefault($7853651519a70071$exports))), "@react-aria/toast");
    return {
        toastProps: {
            role: "alert",
            "aria-label": props["aria-label"],
            "aria-labelledby": props["aria-labelledby"] || titleId,
            "aria-describedby": props["aria-describedby"] || descriptionId,
            "aria-details": props["aria-details"],
            // Hide toasts that are animating out so VoiceOver doesn't announce them.
            "aria-hidden": animation === "exiting" ? "true" : undefined
        },
        titleProps: {
            id: titleId
        },
        descriptionProps: {
            id: descriptionId
        },
        closeButtonProps: {
            "aria-label": stringFormatter.format("close"),
            onPress: ()=>state.close(key)
        }
    };
}








function $6cc546b19ee7130a$export$b8cbbb20a51697de(props, state, ref) {
    let stringFormatter = (0, $5bA4N$useLocalizedStringFormatter)((0, (/*@__PURE__*/$parcel$interopDefault($7853651519a70071$exports))), "@react-aria/toast");
    let { landmarkProps: landmarkProps } = (0, $5bA4N$useLandmark)({
        role: "region",
        "aria-label": props["aria-label"] || stringFormatter.format("notifications")
    }, ref);
    let { hoverProps: hoverProps } = (0, $5bA4N$useHover)({
        onHoverStart: state.pauseAll,
        onHoverEnd: state.resumeAll
    });
    let lastFocused = (0, $5bA4N$useRef)(null);
    let { focusWithinProps: focusWithinProps } = (0, $5bA4N$useFocusWithin)({
        onFocusWithin: (e)=>{
            state.pauseAll();
            lastFocused.current = e.relatedTarget;
        },
        onBlurWithin: ()=>{
            state.resumeAll();
            lastFocused.current = null;
        }
    });
    // When the region unmounts, restore focus to the last element that had focus
    // before the user moved focus into the region.
    // TODO: handle when the element has unmounted like FocusScope does?
    // eslint-disable-next-line arrow-body-style
    (0, $5bA4N$useEffect)(()=>{
        return ()=>{
            if (lastFocused.current && document.body.contains(lastFocused.current)) {
                if ((0, $5bA4N$getInteractionModality)() === "pointer") (0, $5bA4N$focusWithoutScrolling)(lastFocused.current);
                else lastFocused.current.focus();
            }
        };
    }, [
        ref
    ]);
    return {
        regionProps: (0, $5bA4N$mergeProps)(landmarkProps, hoverProps, focusWithinProps, {
            tabIndex: -1,
            // Mark the toast region as a "top layer", so that it:
            //   - is not aria-hidden when opening an overlay
            //   - allows focus even outside a containing focus scope
            //   - doesnâ€™t dismiss overlays when clicking on it, even though it is outside
            // @ts-ignore
            "data-react-aria-top-layer": true
        })
    };
}




export {$d6542812f0669241$export$a407b657d3044108 as useToast, $6cc546b19ee7130a$export$b8cbbb20a51697de as useToastRegion};
//# sourceMappingURL=module.js.map
